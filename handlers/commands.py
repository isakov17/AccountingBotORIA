from aiogram import Router, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from sheets import sheets_service, is_user_allowed
from config import SHEET_NAME, PROVERKACHEKA_TOKEN
from exceptions import (
    get_excluded_items,
    add_excluded_item,
    remove_excluded_item
)
from googleapiclient.errors import HttpError
import logging
import aiohttp

logger = logging.getLogger("AccountingBot")
router = Router()

@router.message(Command("start"))
async def start_command(message: Message):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è user_id={message.from_user.id}")
        return
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –û–†–ò–ê*!\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üí∞ `/balance` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "üì• `/add` ‚Äî –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ QR-–∫–æ–¥—É\n"
        "‚úçÔ∏è `/add_manual` ‚Äî –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫ –≤—Ä—É—á–Ω—É—é\n"
        "‚úÖ `/expenses` ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É\n"
        "üîô `/return [–§–î]` ‚Äî –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/return 199977`)\n"
        "üîî `/disable_notifications [–§–î_–∏–Ω–¥–µ–∫—Å]` ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
    )
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: user_id={message.from_user.id}")
    
@router.message(lambda message: message.text == "–°–±—Ä–æ—Å")
async def reset_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /start", reply_markup=ReplyKeyboardRemove())
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ: user_id={message.from_user.id}")

@router.message(Command("test"))
async def test_connectivity(message: Message):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è /test: user_id={message.from_user.id}")
        return
    response = []
    try:
        sheets_service.spreadsheets().get(spreadsheetId=SHEET_NAME).execute()
        response.append("Google Sheets: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except HttpError as e:
        response.append(f"Google Sheets: –û—à–∏–±–∫–∞ - {e.status_code} {e.reason}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Google Sheets: {e.status_code} - {e.reason}")
    except Exception as e:
        response.append(f"Google Sheets: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {str(e)}")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Google Sheets: {str(e)}")
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get("https://proverkacheka.com/api/v1/check/get", params={"token": PROVERKACHEKA_TOKEN}) as resp:
                response.append(f"Proverkacheka API: HTTP {resp.status}")
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ Proverkacheka API: status={resp.status}")
        except Exception as e:
            response.append(f"Proverkacheka API: –û—à–∏–±–∫–∞ - {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Proverkacheka API: {str(e)}")
    
    await message.answer("\n".join(response))
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /test –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: user_id={message.from_user.id}")
    
@router.message(Command("disable_notifications"))
async def disable_notifications(message: Message, state: FSMContext):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è /disable_notifications: user_id={message.from_user.id}")
        return
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /disable_notifications 199977_2).")
            logger.info(f"–ö–ª—é—á —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω: user_id={message.from_user.id}")
            return
        notification_key = args[1]
        from notifications import notified_items
        notified_items.add(notification_key)
        await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {notification_key} –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã: notification_key={notification_key}, user_id={message.from_user.id}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.")
        logger.error(f"–û—à–∏–±–∫–∞ /disable_notifications: {str(e)}, user_id={message.from_user.id}")

@router.message(Command("debug"))
async def debug_sheets(message: Message):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è /debug: user_id={message.from_user.id}")
        return
    try:
        spreadsheet = sheets_service.spreadsheets().get(spreadsheetId=SHEET_NAME).execute()
        sheet_names = [sheet["properties"]["title"] for sheet in spreadsheet.get("sheets", [])]
        response = [f"Google Sheet ID: {SHEET_NAME}", "–õ–∏—Å—Ç—ã:"]
        for sheet in sheet_names:
            result = sheets_service.spreadsheets().values().get(
                spreadsheetId=SHEET_NAME, range=f"{sheet}!A1:Z1"
            ).execute()
            headers = result.get("values", [[]])[0]
            response.append(f"- {sheet}: {', '.join(headers) if headers else '–ø—É—Å—Ç–æ'}")
        await message.answer("\n".join(response))
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /debug –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: user_id={message.from_user.id}")
    except HttpError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: {e.status_code} - {e.reason}")
        logger.error(f"–û—à–∏–±–∫–∞ /debug: {e.status_code} - {e.reason}, user_id={message.from_user.id}")
    except Exception as e:
        await message.answer(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ /debug: {str(e)}, user_id={message.from_user.id}")

@router.message(Command("add_user"))
async def add_user(message: Message):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è /add_user: user_id={message.from_user.id}")
        return
    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=SHEET_NAME, range="AllowedUsers!A:A"
        ).execute()
        allowed_users = [int(uid) for row in result.get("values", [])[1:] for uid in row if uid and uid.isdigit()]
        if message.from_user.id != allowed_users[0]:
            await message.answer("–¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö.")
            logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: user_id={message.from_user.id}")
            return
        user_id = message.text.split()[1]
        if not user_id.isdigit():
            await message.answer("Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
            logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID: {user_id}, user_id={message.from_user.id}")
            return
        user_id = int(user_id)
        if user_id in allowed_users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ: {user_id}, user_id={message.from_user.id}")
            return
        allowed_users.append(user_id)
        sheets_service.spreadsheets().values().update(
            spreadsheetId=SHEET_NAME,
            range="AllowedUsers!A:A",
            valueInputOption="RAW",
            body={"values": [[str(uid) for uid in allowed_users]]}
        ).execute()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {user_id}, user_id={message.from_user.id}")
    except (IndexError, ValueError):
        await message.answer("–£–∫–∞–∂–∏—Ç–µ Telegram ID: /add_user [Telegram ID]")
        logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è /add_user: text={message.text}, user_id={message.from_user.id}")
    except HttpError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets: {e.status_code} - {e.reason}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.")
        logger.error(f"–û—à–∏–±–∫–∞ /add_user: {e.status_code} - {e.reason}, user_id={message.from_user.id}")
    except Exception as e:
        await message.answer(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ /add_user: {str(e)}, user_id={message.from_user.id}")

@router.message(Command("remove_user"))
async def remove_user(message: Message):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è /remove_user: user_id={message.from_user.id}")
        return
    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=SHEET_NAME, range="AllowedUsers!A:A"
        ).execute()
        allowed_users = [int(uid) for row in result.get("values", [])[1:] for uid in row if uid and uid.isdigit()]
        if message.from_user.id != allowed_users[0]:
            await message.answer("–¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö.")
            logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: user_id={message.from_user.id}")
            return
        user_id = int(message.text.split()[1])
        if user_id not in allowed_users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ.")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ: {user_id}, user_id={message.from_user.id}")
            return
        allowed_users.remove(user_id)
        sheets_service.spreadsheets().values().update(
            spreadsheetId=SHEET_NAME,
            range="AllowedUsers!A:A",
            valueInputOption="RAW",
            body={"values": [[str(uid) for uid in allowed_users]]}
        ).execute()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: {user_id}, user_id={message.from_user.id}")
    except (IndexError, ValueError):
        await message.answer("–£–∫–∞–∂–∏—Ç–µ Telegram ID: /remove_user [Telegram ID]")
        logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è /remove_user: text={message.text}, user_id={message.from_user.id}")
    except HttpError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets: {e.status_code} - {e.reason}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.")
        logger.error(f"–û—à–∏–±–∫–∞ /remove_user: {e.status_code} - {e.reason}, user_id={message.from_user.id}")
    except Exception as e:
        await message.answer(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ /remove_user: {str(e)}, user_id={message.from_user.id}")

@router.message(Command("summary"))
async def summary_report(message: Message):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è /summary: user_id={message.from_user.id}")
        return
    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=SHEET_NAME, range="–ß–µ–∫–∏!A:L"
        ).execute()
        receipts = result.get("values", [])[1:]
        summary = {}
        for row in receipts:
            date = row[0]
            month = date[:7] if date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                amount = float(row[1]) if row[1] else 0
            except (ValueError, IndexError):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –≤ —á–µ–∫–µ: row={row}, user_id={message.from_user.id}")
                continue
            user_id = row[2] if row[2] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            store = row[3] if row[3] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            receipt_type = row[8] if row[8] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            if month not in summary:
                summary[month] = {"total_amount": 0, "users": {}, "stores": {}, "types": {}}
            summary[month]["total_amount"] += amount
            summary[month]["users"].setdefault(user_id, 0)
            summary[month]["users"][user_id] += amount
            summary[month]["stores"].setdefault(store, 0)
            summary[month]["stores"][store] += amount
            summary[month]["types"].setdefault(receipt_type, 0)
            summary[month]["types"][receipt_type] += amount
        
        values = [["–ú–µ—Å—è—Ü", "–û–±—â–∞—è —Å—É–º–º–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ú–∞–≥–∞–∑–∏–Ω—ã", "–¢–∏–ø—ã —á–µ–∫–∞"]]
        for month, data in summary.items():
            users_str = "; ".join([f"{uid}: {amt}" for uid, amt in data["users"].items()])
            stores_str = "; ".join([f"{store}: {amt}" for store, amt in data["stores"].items()])
            types_str = "; ".join([f"{rtype}: {amt}" for rtype, amt in data["types"].items()])
            values.append([month, data["total_amount"], users_str, stores_str, types_str])
        
        sheets_service.spreadsheets().values().update(
            spreadsheetId=SHEET_NAME,
            range="Summary!A:E",
            valueInputOption="RAW",
            body={"values": values}
        ).execute()
        
        response = "–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç:\n"
        for month, data in summary.items():
            response += f"\n–ú–µ—Å—è—Ü: {month}\n"
            response += f"–û–±—â–∞—è —Å—É–º–º–∞: {data['total_amount']} RUB\n"
            response += "–ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n" + "\n".join([f"  {uid}: {amt} RUB" for uid, amt in data["users"].items()]) + "\n"
            response += "–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞–º:\n" + "\n".join([f"  {store}: {amt} RUB" for store, amt in data["stores"].items()]) + "\n"
            response += "–ü–æ —Ç–∏–ø–∞–º —á–µ–∫–∞:\n" + "\n".join([f"  {rtype}: {amt} RUB" for rtype, amt in data["types"].items()]) + "\n"
        
        await message.answer(response)
        logger.info(f"–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: user_id={message.from_user.id}")
    except HttpError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∏–∑ Google Sheets: {e.status_code} - {e.reason}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.")
        logger.error(f"–û—à–∏–±–∫–∞ /summary: {e.status_code} - {e.reason}, user_id={message.from_user.id}")
    except Exception as e:
        await message.answer(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ /summary: {str(e)}, user_id={message.from_user.id}")
        
        
# ... (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç –∏ router)

@router.message(Command("listexclusions"))
async def list_exclusions_command(message: Message):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è /listexclusions: user_id={message.from_user.id}")
        return

    items = get_excluded_items()
    if items:
        content = "üìã *–ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ):*\n" + "\n".join(f"‚Ä¢ `{item}`" for item in items)
    else:
        content = "üìã *–ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:* –ø—É—Å—Ç–æ"

    await message.answer(content, parse_mode="Markdown")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")


@router.message(Command("addexclusion"))
async def add_exclusion_command(message: Message):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è /addexclusion: user_id={message.from_user.id}")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä: `/addexclusion –î–æ—Å—Ç–∞–≤–∫–∞`",
            parse_mode="Markdown"
        )
        logger.info(f"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è /addexclusion: user_id={message.from_user.id}")
        return

    item = args[1].strip()
    if not item:
        await message.answer("‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if add_excluded_item(item):
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: `{item}`", parse_mode="Markdown")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: '{item}', user_id={message.from_user.id}")
    else:
        await message.answer(f"‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: `{item}`", parse_mode="Markdown")
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è: '{item}', user_id={message.from_user.id}")


@router.message(Command("removeexclusion"))
async def remove_exclusion_command(message: Message):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è /removeexclusion: user_id={message.from_user.id}")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.\n"
            "–ü—Ä–∏–º–µ—Ä: `/removeexclusion –î–æ—Å—Ç–∞–≤–∫–∞`",
            parse_mode="Markdown"
        )
        logger.info(f"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è /removeexclusion: user_id={message.from_user.id}")
        return

    item = args[1].strip()
    if not item:
        await message.answer("‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if remove_excluded_item(item):
        await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: `{item}`", parse_mode="Markdown")
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: '{item}', user_id={message.from_user.id}")
    else:
        await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: `{item}`", parse_mode="Markdown")
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: '{item}', user_id={message.from_user.id}")