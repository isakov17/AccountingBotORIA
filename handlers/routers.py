from config import SHEET_NAME, PROVERKACHEKA_TOKEN
from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery
from sheets import sheets_service, is_user_allowed, is_fiscal_doc_unique, save_receipt, get_monthly_balance, save_receipt_summary
from utils import parse_qr_from_photo, confirm_manual_api
from googleapiclient.errors import HttpError
import logging
from datetime import datetime
import re
import asyncio

logger = logging.getLogger("AccountingBot")
router = Router()

class AddReceiptQR(StatesGroup):
    UPLOAD_QR = State()
    CUSTOMER = State()
    SELECT_TYPE = State()
    CONFIRM_DELIVERY_DATE = State()
    CONFIRM_ACTION = State()

class ConfirmDelivery(StatesGroup):
    SELECT_RECEIPT = State()   # –≤—ã–±–æ—Ä —á–µ–∫–∞ (–ø–æ fiscal_doc)
    SELECT_ITEMS = State()     # –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–π –≤ —á–µ–∫–µ
    UPLOAD_FULL_QR = State()   # –∑–∞–≥—Ä—É–∑–∫–∞ QR –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
    CONFIRM_ACTION = State()   # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

class ReturnReceipt(StatesGroup):
    ENTER_FISCAL_DOC = State()
    SELECT_ITEM = State()
    UPLOAD_RETURN_QR = State()
    CONFIRM_ACTION = State()

class AddManualAPI(StatesGroup):
    FN = State()
    FD = State()
    FP = State()
    SUM = State()
    DATE = State()
    TIME = State()
    TYPE = State()
    CONFIRM = State()


# üîΩ –î–û–ë–ê–í–¨ –ö –ò–ú–ü–û–†–¢–ê–ú –í–í–ï–†–•–£ –§–ê–ô–õ–ê
from aiogram import F
from aiogram.filters import StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# üîΩ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–ï–†–ï–•–í–ê–¢ –§–û–¢–û QR, –ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –í–û–®–ï–õ –í /add
@router.message(StateFilter(None), F.photo)
async def catch_qr_photo_without_command(message: Message, state: FSMContext, bot: Bot):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –∞–≤—Ç–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∏ QR: user_id={message.from_user.id}")
        return

    loading = await message.answer("‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ —á–µ–∫–∞...")

    try:
        parsed_data = await asyncio.wait_for(
            parse_qr_from_photo(bot, message.photo[-1].file_id),
            timeout=10.0
        )

        if not parsed_data:
            inline_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="goto_add_manual")]]
            )
            await loading.edit_text(
                "‚ùå QR-–∫–æ–¥ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ —á–µ–∫—É.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —á–µ–∫ –≤—Ä—É—á–Ω—É—é:",
                reply_markup=inline_keyboard
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥: user_id={message.from_user.id}")
            await state.clear()
            return

        if not await is_fiscal_doc_unique(parsed_data["fiscal_doc"]):
            await loading.edit_text(
                f"‚ùå –ß–µ–∫ —Å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {parsed_data['fiscal_doc']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )
            logger.info(
                f"–ê–≤—Ç–æ-QR: –¥—É–±–ª–∏–∫–∞—Ç —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ {parsed_data['fiscal_doc']}, user_id={message.from_user.id}"
            )
            await state.clear()
            return

        await loading.edit_text("‚úÖ QR-–∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ (–∏–ª–∏ /skip):", reply_markup=keyboard)
        await state.update_data(
            username=message.from_user.username or str(message.from_user.id),
            parsed_data=parsed_data
        )
        await state.set_state(AddReceiptQR.CUSTOMER)
        logger.info(
            f"–ê–≤—Ç–æ-—Å—Ç–∞—Ä—Ç /add –ø–æ —Ñ–æ—Ç–æ QR: fiscal_doc={parsed_data['fiscal_doc']}, "
            f"qr_string={parsed_data['qr_string']}, user_id={message.from_user.id}"
        )

    except asyncio.TimeoutError:
        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="goto_add_manual")]]
        )
        await loading.edit_text(
            "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —á–µ–∫ –≤—Ä—É—á–Ω—É—é:",
            reply_markup=inline_keyboard
        )
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞: user_id={message.from_user.id}")
        await state.clear()
    except Exception as e:
        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="goto_add_manual")]]
        )
        await loading.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ —á–µ–∫—É.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —á–µ–∫ –≤—Ä—É—á–Ω—É—é:",
            reply_markup=inline_keyboard
        )
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞: {str(e)}, user_id={message.from_user.id}")
        await state.clear()



@router.callback_query(lambda c: c.data == "goto_add_manual")
async def goto_add_manual(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await add_manual_start(callback.message, state)  # –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ –µ—Å–ª–∏ –±—ã /add_manual
    await callback.answer()


@router.message(Command("add"))
async def start_add_receipt(message: Message, state: FSMContext):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è /add: user_id={message.from_user.id}")
        return
    await state.update_data(username=message.from_user.username or str(message.from_user.id))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –∏–ª–∏ id –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —á–µ–∫–∞.")
    await state.set_state(AddReceiptQR.UPLOAD_QR)
    logger.info(f"–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞ –ø–æ QR: user_id={message.from_user.id}")

@router.message(Command("add_manual"))
async def add_manual_start(message: Message, state: FSMContext):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–§–ù* (–Ω–æ–º–µ—Ä —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è):", parse_mode="Markdown")
    await state.set_state(AddManualAPI.FN)


@router.message(AddReceiptQR.UPLOAD_QR)
async def process_qr_upload(message: Message, state: FSMContext, bot: Bot):
    if not message.photo:
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —á–µ–∫–∞.", reply_markup=keyboard)
        logger.info(f"–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è QR: user_id={message.from_user.id}")
        return
    parsed_data = await parse_qr_from_photo(bot, message.photo[-1].file_id)
    if not parsed_data:
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True)
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ QR-–∫–æ–¥ —á–µ—Ç–∫–∏–π, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_manual –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞.", reply_markup=keyboard)
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞: user_id={message.from_user.id}")
        await state.clear()
        return
    if not await is_fiscal_doc_unique(parsed_data["fiscal_doc"]):
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True)
        await message.answer(f"–ß–µ–∫ —Å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {parsed_data['fiscal_doc']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=keyboard)
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: {parsed_data['fiscal_doc']}, user_id={message.from_user.id}")
        await state.clear()
        return
    loading_message = await message.answer("‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    await state.update_data(parsed_data=parsed_data)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ (–∏–ª–∏ /skip):", reply_markup=keyboard)
    await state.set_state(AddReceiptQR.CUSTOMER)
    await loading_message.edit_text("QR-–∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
    logger.info(f"QR-–∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: fiscal_doc={parsed_data['fiscal_doc']}, user_id={message.from_user.id}")

@router.message(AddReceiptQR.CUSTOMER)
async def process_customer(message: Message, state: FSMContext):
    customer = message.text if message.text != "/skip" else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    await state.update_data(customer=customer)
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞", callback_data="type_delivery")],
        [InlineKeyboardButton(text="–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="type_store")]
    ])
    reply_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True)
    await message.answer("–≠—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –ø–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ?", reply_markup=inline_keyboard)
    await message.answer("–ò–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_keyboard)
    await state.set_state(AddReceiptQR.SELECT_TYPE)
    logger.info(f"–ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–∏–Ω—è—Ç: {customer}, user_id={message.from_user.id}")

@router.callback_query(AddReceiptQR.SELECT_TYPE)
async def process_receipt_type(callback, state: FSMContext):
    data = await state.get_data()
    parsed_data = data["parsed_data"]
    total_sum = sum(item["sum"] for item in parsed_data["items"])
    items_list = "\n".join([f"- {item['name']} (–°—É–º–º–∞: {item['sum']:.2f} RUB)" for item in parsed_data["items"]])
    if callback.data == "type_store":
        receipt_type = "–ü–æ–ª–Ω—ã–π"
        delivery_date = ""
        status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        receipt = {
            "date": parsed_data["date"],
            "store": parsed_data.get("store", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "items": [{"name": item["name"], "sum": item["sum"]} for item in parsed_data["items"]],  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
            "receipt_type": receipt_type,
            "fiscal_doc": parsed_data["fiscal_doc"],
            "qr_string": parsed_data["qr_string"],
            "delivery_date": delivery_date,
            "status": status,
            "customer": data["customer"]
        }
        details = (
            f"–î–µ—Ç–∞–ª–∏ —á–µ–∫–∞:\n"
            f"–ú–∞–≥–∞–∑–∏–Ω: {receipt['store']}\n"
            f"–ó–∞–∫–∞–∑—á–∏–∫: {receipt['customer']}\n"
            f"–°—É–º–º–∞: {total_sum:.2f} RUB\n"
            f"–¢–æ–≤–∞—Ä—ã:\n{items_list}\n"
            f"–§–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {parsed_data['fiscal_doc']}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add")]
        ])
        await callback.message.answer(details, reply_markup=keyboard)
        await state.update_data(receipt=receipt)
        await state.set_state(AddReceiptQR.CONFIRM_ACTION)
    elif callback.data == "type_delivery":
        receipt_type = "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞"
        await state.update_data(receipt_type=receipt_type)
        items = parsed_data["items"]
        if len(items) == 1:
            await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è {items[0]['name']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥–º–º–≥–≥ (6 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä 110825 –¥–ª—è 11.08.2025) –∏–ª–∏ /skip.")
            await state.set_state(AddReceiptQR.CONFIRM_DELIVERY_DATE)
        else:
            await state.update_data(current_item_index=0, delivery_dates=[])
            await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è {items[0]['name']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥–º–º–≥–≥ (6 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä 110825 –¥–ª—è 11.08.2025) –∏–ª–∏ /skip.")
            await state.set_state(AddReceiptQR.CONFIRM_DELIVERY_DATE)
    await callback.answer()

@router.message(AddReceiptQR.CONFIRM_DELIVERY_DATE)
async def process_delivery_date(message: Message, state: FSMContext):
    data = await state.get_data()
    parsed_data = data["parsed_data"]
    receipt_type = data["receipt_type"]
    items = parsed_data["items"]
    current_item_index = data.get("current_item_index", 0)
    delivery_dates = data.get("delivery_dates", [])

    if message.text == "/skip":
        delivery_date = ""
    else:
        date_pattern = r"^\d{6}$"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ä–æ–≤–Ω–æ 6 —Ü–∏—Ñ—Ä
        if not re.match(date_pattern, message.text):
            keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True)
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥–º–º–≥–≥ (6 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä 110825 –¥–ª—è 11.08.2025) –∏–ª–∏ /skip.", reply_markup=keyboard)
            return
        try:
            day = message.text[0:2]
            month = message.text[2:4]
            year = message.text[4:6]
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –≥–æ–¥ - 2025, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã
            full_year = f"20{year}"  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025)
            normalized_date = f"{day}.{month}.{full_year}"
            datetime.strptime(normalized_date, "%d.%m.%Y")
            delivery_date = normalized_date
        except ValueError:
            keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True)
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥–º–º–≥–≥ (6 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä 110825 –¥–ª—è 11.08.2025) –∏–ª–∏ /skip.", reply_markup=keyboard)
            return

    delivery_dates.append(delivery_date)
    await state.update_data(delivery_dates=delivery_dates)

    if current_item_index + 1 < len(items):
        await state.update_data(current_item_index=current_item_index + 1)
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è {items[current_item_index + 1]['name']} (–¥–¥–º–º–≥–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä 110825 –¥–ª—è 11.08.2025) –∏–ª–∏ /skip:", reply_markup=keyboard)
        return

    total_sum = sum(item["sum"] for item in items)
    items_list = "\n".join([f"- {item['name']} (–°—É–º–º–∞: {item['sum']:.2f} RUB, –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_dates[i] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})" for i, item in enumerate(items)])
    receipt = {
        "date": parsed_data["date"],
        "store": parsed_data.get("store", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "items": [{"name": item["name"], "sum": item["sum"]} for item in parsed_data["items"]],
        "receipt_type": receipt_type,
        "fiscal_doc": parsed_data["fiscal_doc"],
        "qr_string": parsed_data["qr_string"],
        "delivery_dates": delivery_dates,
        "status": "–û–∂–∏–¥–∞–µ—Ç",
        "customer": data["customer"]
    }
    details = (
        f"–î–µ—Ç–∞–ª–∏ —á–µ–∫–∞:\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {receipt['store']}\n"
        f"–ó–∞–∫–∞–∑—á–∏–∫: {receipt['customer']}\n"
        f"–°—É–º–º–∞: {total_sum:.2f} RUB\n"
        f"–¢–æ–≤–∞—Ä—ã:\n{items_list}\n"
        f"–§–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {parsed_data['fiscal_doc']}"
    )
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add")]
    ])
    reply_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True)
    await message.answer(details, reply_markup=inline_keyboard)
    await message.answer("–ò–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_keyboard)
    await state.update_data(receipt=receipt)
    await state.set_state(AddReceiptQR.CONFIRM_ACTION)

@router.callback_query(AddReceiptQR.CONFIRM_ACTION, lambda c: c.data == "confirm_add")
async def confirm_add_action(callback: CallbackQuery, state: FSMContext):
    loading_message = await callback.message.answer("‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    data = await state.get_data()
    receipt = data["receipt"]
    parsed_data = data["parsed_data"]
    user_name = await is_user_allowed(callback.from_user.id)
    if not user_name:
        await loading_message.edit_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è confirm_add: user_id={callback.from_user.id}")
        await state.clear()
        await callback.answer()
        return
    delivery_dates = receipt.get("delivery_dates", [])

    is_delivery = receipt.get("receipt_type") == "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞"
    receipt_type_for_save = "–î–æ—Å—Ç–∞–≤–∫–∞" if is_delivery else "–ü–æ–∫—É–ø–∫–∞"

    ok, fail = 0, 0
    for i, item in enumerate(receipt["items"]):
        one = {
            "date": parsed_data["date"],
            "store": parsed_data.get("store", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "items": [{"name": item["name"], "sum": item["sum"]}],
            "receipt_type": "–ü–æ–ª–Ω—ã–π" if not is_delivery else "–î–æ—Å—Ç–∞–≤–∫–∞",
            "fiscal_doc": parsed_data["fiscal_doc"],
            "qr_string": parsed_data["qr_string"],
            "delivery_date": delivery_dates[i] if i < len(delivery_dates) else "",
            "status": "–û–∂–∏–¥–∞–µ—Ç" if is_delivery else "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
            "customer": receipt.get("customer", data.get("customer", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")),
            "excluded_sum": parsed_data.get("excluded_sum", 0.0),
            "excluded_items": parsed_data.get("excluded_items", [])
        }

        saved = await save_receipt(one, user_name, callback.from_user.id, receipt_type=receipt_type_for_save)
        if saved:
            ok += 1
        else:
            fail += 1

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    balance_data = await get_monthly_balance()
    balance = balance_data.get("balance", 0.0) if balance_data else 0.0

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if ok and not fail:
        await loading_message.edit_text(
            f"‚úÖ –ß–µ–∫ {receipt['fiscal_doc']} –¥–æ–±–∞–≤–ª–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}).\n"
            f"–ü–æ–∑–∏—Ü–∏–∏: {ok}/{ok}.\n"
            f"üü∞ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {balance:.2f} RUB",
            parse_mode="Markdown"
        )
    elif ok and fail:
        await loading_message.edit_text(
            f"‚ö†Ô∏è –ß–µ–∫ {receipt['fiscal_doc']} –¥–æ–±–∞–≤–ª–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}).\n"
            f"–£–¥–∞–ª–æ—Å—å: {ok}, –æ—à–∏–±–æ–∫: {fail}. –°–º–æ—Ç—Ä–∏ /debug –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.\n"
            f"üü∞ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {balance:.2f} RUB",
            parse_mode="Markdown"
        )
    else:
        await loading_message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ–∫ {receipt['fiscal_doc']}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /add_manual."
        )

    logger.info(
        f"–ß–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: fiscal_doc={receipt['fiscal_doc']}, saved={ok}, failed={fail}, balance={balance}, user_id={callback.from_user.id}, user_name={user_name}"
    )
    await state.clear()
    await callback.answer()



@router.callback_query(AddReceiptQR.CONFIRM_ACTION, lambda c: c.data == "cancel_add")
async def cancel_add_action(callback, state: FSMContext):
    await callback.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /add")
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ: user_id={callback.from_user.id}")
    await state.clear()
    await callback.answer()
    
        

# === –ú–£–õ–¨–¢–ò–í–´–ë–û–† –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –î–û–°–¢–ê–í–ö–ò /expenses ===
from aiogram import F

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)

def _norm_name(s: str) -> str:
    s = (s or "").lower().strip()
    return " ".join(s.split())

def _rub(val) -> float:
    """
    –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º —Å—É–º–º—É –∏–∑ QR –∫ —Ä—É–±–ª—è–º.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º: sum (–≤ —Ä—É–±–ª—è—Ö/–∫–æ–ø–µ–π–∫–∞—Ö) –∏–ª–∏ price*quantity.
    """
    if val is None:
        return 0.0
    try:
        v = float(val)
        # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —Ü–µ–ª–æ–µ ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ, –∫–æ–ø–µ–π–∫–∏
        return v/100.0 if (v > 500 and float(v).is_integer()) else v
    except Exception:
        return 0.0

def _item_sum_from_qr(item: dict) -> float:
    if "sum" in item and item["sum"] is not None:
        return _rub(item["sum"])
    price = _rub(item.get("price", 0))
    qty = float(item.get("quantity", 1) or 1)
    return price * qty

# 1) /expenses ‚Äî —Å–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –æ–∂–∏–¥–∞—é—â–∏–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.message(Command("expenses"))
async def list_pending_receipts(message: Message, state: FSMContext):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    try:
        res = sheets_service.spreadsheets().values().get(
            spreadsheetId=SHEET_NAME, range="–ß–µ–∫–∏!A:M"
        ).execute()
        rows = res.get("values", [])[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

        groups = {}  # fiscal_doc -> list[{row_index,name,sum,date,user,store}]
        for i, row in enumerate(rows, start=2):
            status = (row[6] if len(row) > 6 else "").strip().lower()
            if status != "–æ–∂–∏–¥–∞–µ—Ç":
                continue
            fiscal_doc = (row[10] if len(row) > 10 else "").strip()
            item_name  = (row[8] if len(row) > 8 else "").strip()
            if not fiscal_doc or not item_name:
                continue
            try:
                item_sum = float((row[2] if len(row) > 2 else "0").replace(",", "."))
            except Exception:
                item_sum = 0.0
            groups.setdefault(fiscal_doc, []).append({
                "row_index": i,
                "name": item_name,
                "sum": item_sum,
                "date": row[1] if len(row) > 1 else "",
                "user": row[3] if len(row) > 3 else "",
                "store": row[4] if len(row) > 4 else ""
            })

        if not groups:
            await message.answer("–ù–µ—Ç —á–µ–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´–û–∂–∏–¥–∞–µ—Ç¬ª.")
            return

        kb_rows = []
        for fd, items in groups.items():
            kb_rows.append([
                InlineKeyboardButton(text=f"{fd} ‚Äî –ø–æ–∑–∏—Ü–∏–π: {len(items)}",
                                     callback_data=f"choose_fd:{fd}")
            ])

        await state.update_data(pending_groups=groups)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫ (fiscal_doc), –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
        )
        await state.set_state(ConfirmDelivery.SELECT_RECEIPT)
    except HttpError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ Google Sheets: {e.status_code} - {e.reason}")
    except Exception as e:
        await message.answer(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

# 2) –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–∫–∞ ‚Üí –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–π
@router.callback_query(ConfirmDelivery.SELECT_RECEIPT, F.data.startswith("choose_fd:"))
async def choose_receipt(callback: CallbackQuery, state: FSMContext):
    fiscal_doc = callback.data.split(":", 1)[-1]  # –ë–ï–ó int(...), —á–∏—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    data = await state.get_data()
    groups = data.get("pending_groups", {})
    items = groups.get(fiscal_doc, [])
    if not items:
        await callback.message.edit_text("–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π —ç—Ç–æ–≥–æ —á–µ–∫–∞
    await state.update_data(items=items, selected=set(), fd=fiscal_doc)

    # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏
    def build_kb(items, selected_idxs):
        rows = []
        for idx, it in enumerate(items):
            checked = "‚òëÔ∏è" if idx in selected_idxs else "‚¨úÔ∏è"
            rows.append([
                InlineKeyboardButton(
                    text=f"{checked} {it['name']} ‚Äî {it['sum']:.2f} RUB (—Å—Ç—Ä. {it['row_index']})",
                    callback_data=f"sel:toggle:{idx}"
                )
            ])
        rows.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="sel:done")])
        rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="sel:cancel")])
        return InlineKeyboardMarkup(inline_keyboard=rows)

    kb = build_kb(items, set())
    await callback.message.edit_text(
        f"–ß–µ–∫ {fiscal_doc}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        reply_markup=kb
    )
    await state.set_state(ConfirmDelivery.SELECT_ITEMS)
    await callback.answer()

# 3) –¢–æ–≥–≥–ª/–≥–æ—Ç–æ–≤–æ/–æ—Ç–º–µ–Ω–∞ –¥–ª—è –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞
@router.callback_query(ConfirmDelivery.SELECT_ITEMS, F.data.startswith("sel:"))
async def select_items_toggle(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    items = data.get("items", [])
    selected = set(data.get("selected", set()))

    cmd = callback.data
    if cmd == "sel:cancel":
        await callback.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        await callback.answer()
        return

    if cmd == "sel:done":
        if not selected:
            await callback.answer("–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.", show_alert=True)
            return
        await state.update_data(selected=selected)
        await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –ß–ï–ö–ê –ü–û–õ–ù–û–ì–û –†–ê–°–ß–Å–¢–ê (operationType=1).")
        await state.set_state(ConfirmDelivery.UPLOAD_FULL_QR)
        await callback.answer()
        return

    # sel:toggle:{idx}
    try:
        _, _, sidx = cmd.split(":", 2)
        idx = int(sidx)
        if idx < 0 or idx >= len(items):
            raise ValueError("bad index")
        if idx in selected:
            selected.remove(idx)
        else:
            selected.add(idx)
        await state.update_data(selected=selected)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å.", show_alert=True)
        return

    # –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    def build_kb(items, selected_idxs):
        rows = []
        for i, it in enumerate(items):
            checked = "‚òëÔ∏è" if i in selected_idxs else "‚¨úÔ∏è"
            rows.append([
                InlineKeyboardButton(
                    text=f"{checked} {it['name']} ‚Äî {it['sum']:.2f} RUB (—Å—Ç—Ä. {it['row_index']})",
                    callback_data=f"sel:toggle:{i}"
                )
            ])
        rows.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="sel:done")])
        rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="sel:cancel")])
        return InlineKeyboardMarkup(inline_keyboard=rows)

    kb = build_kb(items, selected)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()

# 4) –ó–∞–≥—Ä—É–∑–∫–∞ QR –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
@router.message(ConfirmDelivery.UPLOAD_FULL_QR)
async def upload_full_qr(message: Message, state: FSMContext, bot: Bot):
    loading = await message.answer("‚åõ –ü—Ä–æ–≤–µ—Ä—è—é —á–µ–∫...")

    if not message.photo:
        await loading.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —á–µ–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.")
        return

    parsed = await parse_qr_from_photo(bot, message.photo[-1].file_id)
    if not parsed:
        await loading.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ.")
        return

    # –¢–æ–ª—å–∫–æ –ü–û–õ–ù–´–ô —Ä–∞—Å—á—ë—Ç
    if parsed.get("operation_type") != 1:
        await loading.edit_text("–≠—Ç–æ –Ω–µ —á–µ–∫ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ (operationType –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1).")
        return

    data = await state.get_data()
    items = data.get("items", [])
    selected = sorted(list(data.get("selected", set())))
    sel_items = [items[i] for i in selected]

    # –°–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Å—É–º–º—ã (—Å—Ç—Ä–æ–≥–∏–π –º–∞—Ç—á –ø–æ –∏–º–µ–Ω–∏, –¥–æ–ø—É—Å–∫–∞–µ–º ¬´–≤—Ö–æ–∂–¥–µ–Ω–∏—è¬ª; —Å—É–º–º–∞ ¬±2 –∫–æ–ø.)
    qr_items = parsed.get("items", [])
    missing = []
    for it in sel_items:
        need_name = _norm_name(it["name"])
        need_sum  = float(it["sum"])
        matched = False
        for q in qr_items:
            q_name = _norm_name(q.get("name", ""))
            if not q_name:
                continue
            if q_name == need_name or (need_name in q_name or q_name in need_name):
                q_sum = _item_sum_from_qr(q)
                if abs(q_sum - need_sum) <= 0.02:
                    matched = True
                    break
        if not matched:
            missing.append(f"{it['name']} ({it['sum']:.2f})")

    if missing:
        await loading.edit_text(
            "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞. –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤ QR (–∏–ª–∏ —Å—É–º–º—ã –Ω–µ —Å–æ–≤–ø–∞–ª–∏):\n‚Ä¢ " + "\n‚Ä¢ ".join(missing)
        )
        return

    # –£—Å–ø–µ—Ö ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π —á–µ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(qr_parsed=parsed)
    total = sum(it["sum"] for it in sel_items)
    details = [
        f"–ß–µ–∫ (fiscal_doc): {parsed.get('fiscal_doc')}",
        f"–ü–æ–∑–∏—Ü–∏–∏ ({len(sel_items)} —à—Ç., –∏—Ç–æ–≥–æ {total:.2f} RUB):"
    ] + [f"‚Ä¢ {it['name']} ‚Äî {it['sum']:.2f} RUB (—Å—Ç—Ä–æ–∫–∞ {it['row_index']})" for it in sel_items]

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm:delivery_many")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="confirm:cancel")]
    ])
    await loading.edit_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞.\n" + "\n".join(details), reply_markup=kb)
    await state.set_state(ConfirmDelivery.CONFIRM_ACTION)

# 5) –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ ¬´–ß–µ–∫–∏¬ª –∏ –ø–∏—à–µ–º ¬´–°–≤–æ–¥–∫–∞¬ª
@router.callback_query(ConfirmDelivery.CONFIRM_ACTION, F.data.in_(["confirm:delivery_many", "confirm:cancel"]))
async def confirm_delivery_many(callback: CallbackQuery, state: FSMContext):
    if callback.data == "confirm:cancel":
        await callback.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        await callback.answer()
        return

    data = await state.get_data()
    items = data.get("items", [])
    selected = sorted(list(data.get("selected", set())))
    sel_items = [items[i] for i in selected]
    parsed = data.get("qr_parsed", {})

    new_fd = parsed.get("fiscal_doc", "")
    qr_str = parsed.get("qr_string", "")

    ok, fail = 0, 0
    errors = []

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ ¬´–ß–µ–∫–∏¬ª –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ ¬´–°–≤–æ–¥–∫–∞¬ª
    for it in sel_items:
        row_index = it["row_index"]
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            res = sheets_service.spreadsheets().values().get(
                spreadsheetId=SHEET_NAME, range=f"–ß–µ–∫–∏!A{row_index}:M{row_index}"
            ).execute()
            row = res.get("values", [[]])[0] if res.get("values") else []
            while len(row) < 13:
                row.append("")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            row[6] = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"  # G: —Å—Ç–∞—Ç—É—Å
            row[9] = "–ü–æ–ª–Ω—ã–π"      # J: —Ç–∏–ø —á–µ–∫–∞
            row[10] = str(new_fd)  # K: fiscal_doc –ø–æ–ª–Ω–æ–≥–æ —á–µ–∫–∞
            row[11] = qr_str       # L: QR-—Å—Ç—Ä–æ–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞

            sheets_service.spreadsheets().values().update(
                spreadsheetId=SHEET_NAME,
                range=f"–ß–µ–∫–∏!A{row_index}:M{row_index}",
                valueInputOption="RAW",
                body={"values": [row]}
            ).execute()

            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤ –ß–µ–∫–∏: row={row_index}, fiscal_doc={new_fd}, qr_string={qr_str}")
            ok += 1
        except HttpError as e:
            fail += 1
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_index}: {e.status_code} - {e.reason}")
        except Exception as e:
            fail += 1
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_index}: {str(e)}")

    # –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    try:
        balance_data = await get_monthly_balance()
        balance = balance_data.get("balance", 0.0) if balance_data else 0.0
    except Exception:
        balance = 0.0

    if fail == 0:
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {ok}/{ok}. –ß–µ–∫ {new_fd}."
        )
    else:
        details = "\n".join(errors[:10])
        more = f"\n‚Ä¶–∏ –µ—â—ë {len(errors)-10}" if len(errors) > 10 else ""
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ: —É—Å–ø–µ—à–Ω–æ {ok}, –æ—à–∏–±–æ–∫ {fail}.\n{details}{more}\nüü∞ –û—Å—Ç–∞—Ç–æ–∫: {balance:.2f} RUB"
        )

    await state.clear()
    await callback.answer()
# === –ö–û–ù–ï–¶ –ë–õ–û–ö–ê /expenses ===




@router.message(Command("return"))
async def return_receipt(message: Message, state: FSMContext):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è /return: user_id={message.from_user.id}")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]],
        resize_keyboard=True
    )
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:", reply_markup=keyboard)
    await state.set_state(ReturnReceipt.ENTER_FISCAL_DOC)
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–ª—è /return: user_id={message.from_user.id}")

@router.message(ReturnReceipt.ENTER_FISCAL_DOC)
async def process_fiscal_doc(message: Message, state: FSMContext):
    fiscal_doc = message.text.strip()
    if fiscal_doc == "–°–±—Ä–æ—Å":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        logger.info(f"–°–±—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è /return: user_id={message.from_user.id}")
        return

    if not fiscal_doc.isdigit() or len(fiscal_doc) > 20:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]],
            resize_keyboard=True
        )
        await message.answer("–§–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=keyboard)
        logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è /return: {fiscal_doc}, user_id={message.from_user.id}")
        return

    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=SHEET_NAME, range="–ß–µ–∫–∏!A:M"
        ).execute()
        receipts = [row for row in result.get("values", [])[1:] if len(row) > 10 and row[10] == fiscal_doc and row[6] != "–í–æ–∑–≤—Ä–∞—â–µ–Ω"]
        if not receipts:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]],
                resize_keyboard=True
            )
            await message.answer("–ß–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", reply_markup=keyboard)
            logger.info(f"–ß–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è /return: fiscal_doc={fiscal_doc}, user_id={message.from_user.id}")
            return
        item_map = {}
        for i, row in enumerate(receipts):
            item_map[i] = row[8] if len(row) > 8 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        await state.update_data(fiscal_doc=fiscal_doc, item_map=item_map)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=row[8] if len(row) > 8 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", callback_data=f"—Ç–æ–≤–∞—Ä_{fiscal_doc}_{i}")]
            for i, row in enumerate(receipts)
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:", reply_markup=keyboard)
        await state.set_state(ReturnReceipt.SELECT_ITEM)
        logger.info(f"–ß–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω: fiscal_doc={fiscal_doc}, user_id={message.from_user.id}")
    except HttpError as e:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]],
            resize_keyboard=True
        )
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e.status_code} - {e.reason}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.", reply_markup=keyboard)
        logger.error(f"–û—à–∏–±–∫–∞ /return: {e.status_code} - {e.reason}, user_id={message.from_user.id}")
    except Exception as e:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]],
            resize_keyboard=True
        )
        await message.answer(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.", reply_markup=keyboard)
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ /return: {str(e)}, user_id={message.from_user.id}")

# (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ SELECT_ITEM, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)

@router.callback_query(ReturnReceipt.SELECT_ITEM)
async def process_return_item(callback, state: FSMContext):
    try:
        _, fiscal_doc, index = callback.data.split("_")
        index = int(index)
        data = await state.get_data()
        item_name = data["item_map"].get(index, "")
        if not item_name:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.error(f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ item_map: index={index}, user_id={callback.from_user.id}")
            await state.clear()
            await callback.answer()
            return
        await state.update_data(fiscal_doc=fiscal_doc, item_name=item_name)
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ —á–µ–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞.")
        await state.set_state(ReturnReceipt.UPLOAD_RETURN_QR)
        await callback.answer()
        logger.info(f"–¢–æ–≤–∞—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω: fiscal_doc={fiscal_doc}, item={item_name}, user_id={callback.from_user.id}")
    except ValueError:
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞: callback_data={callback.data}, user_id={callback.from_user.id}")
        await state.clear()
        await callback.answer()

@router.message(ReturnReceipt.UPLOAD_RETURN_QR)
async def process_return_qr(message: Message, state: FSMContext, bot: Bot):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await message.answer("‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    if not message.photo:
        await loading_message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True))
        logger.info(f"–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: user_id={message.from_user.id}")
        return

    parsed_data = await parse_qr_from_photo(bot, message.photo[-1].file_id)
    if not parsed_data:
        await loading_message.edit_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ QR-–∫–æ–¥ —á–µ—Ç–∫–∏–π.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True))
        logger.info(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: user_id={message.from_user.id}")
        return

    if parsed_data["operation_type"] != 2:
        await loading_message.edit_text("–ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–æ–º (operationType == 2).", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True))
        logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: operation_type={parsed_data['operation_type']}, user_id={message.from_user.id}")
        return

    # === –ù–æ–≤—ã–π –±–ª–æ–∫: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —á–µ–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä ===
    data = await state.get_data()
    expected_item = (data or {}).get("item_name", "")

    def norm(s: str) -> str:
        s = (s or "").lower()
        s = " ".join(s.split())
        return s

    tgt = norm(expected_item)
    found_match = False
    for it in parsed_data.get("items", []):
        name = norm(it.get("name", ""))
        # —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ + ¬´–º—è–≥–∫–∞—è¬ª (–Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–ª–∏—á–∏–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤/—Ö–≤–æ—Å—Ç–æ–≤)
        if name == tgt or (tgt and (tgt in name or name in tgt)):
            found_match = True
            break

    if not found_match:
        await loading_message.edit_text(f"–¢–æ–≤–∞—Ä ¬´{expected_item}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True))
        logger.info(
            "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞: need=%s, got_items=%s, user_id=%s",
            expected_item,
            [x.get('name') for x in parsed_data.get('items', [])],
            message.from_user.id
        )
        return
    # === –∫–æ–Ω–µ—Ü –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ ===

    new_fiscal_doc = parsed_data["fiscal_doc"]
    if not await is_fiscal_doc_unique(new_fiscal_doc):
        await loading_message.edit_text(f"–ß–µ–∫ —Å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {new_fiscal_doc} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]], resize_keyboard=True))
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: new_fiscal_doc={new_fiscal_doc}, user_id={message.from_user.id}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    fiscal_doc = data["fiscal_doc"]
    item_name = data["item_name"]
    total_sum = 0.0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    details = (
        f"–ú–∞–≥–∞–∑–∏–Ω: {data.get('store', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"–ó–∞–∫–∞–∑—á–∏–∫: {data.get('customer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"–°—É–º–º–∞: {total_sum:.2f} RUB\n"
        f"–¢–æ–≤–∞—Ä: {item_name}\n"
        f"–ù–æ–≤—ã–π —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {new_fiscal_doc}"
    )
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_return")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_return")]
    ])
    await loading_message.edit_text(f"–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ {item_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –î–µ—Ç–∞–ª–∏:\n{details}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)
    await state.update_data(
        new_fiscal_doc=new_fiscal_doc,
        parsed_data=parsed_data,
        fiscal_doc=fiscal_doc,
        item_name=item_name
    )
    await state.set_state(ReturnReceipt.CONFIRM_ACTION)
    logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é: old_fiscal_doc={fiscal_doc}, new_fiscal_doc={new_fiscal_doc}, item={item_name}, user_id={message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
@router.callback_query(ReturnReceipt.CONFIRM_ACTION, lambda c: c.data in ["confirm_return", "cancel_return"])
async def handle_return_confirmation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    fiscal_doc = data.get("fiscal_doc")
    new_fiscal_doc = data.get("new_fiscal_doc")
    item_name = data.get("item_name")
    parsed_data = data.get("parsed_data")

    if callback.data == "confirm_return":
        try:
            result = sheets_service.spreadsheets().values().get(
                spreadsheetId=SHEET_NAME, range="–ß–µ–∫–∏!A:M"
            ).execute()
            rows = result.get("values", [])[1:]
            row_updated = False
            for i, row in enumerate(rows, start=2):
                if len(row) > 10 and row[10] == fiscal_doc and row[8] == item_name:
                    while len(row) < 13:
                        row.append("")
                    row[6] = "–í–æ–∑–≤—Ä–∞—â–µ–Ω"  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í–æ–∑–≤—Ä–∞—â–µ–Ω"
                    row[12] = parsed_data["qr_string"]  # –î–æ–±–∞–≤–ª—è–µ–º QR-—Å—Ç—Ä–æ–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                    sheets_service.spreadsheets().values().update(
                        spreadsheetId=SHEET_NAME,
                        range=f"–ß–µ–∫–∏!A{i}:M{i}",
                        valueInputOption="RAW",
                        body={"values": [row]}
                    ).execute()
                    row_updated = True
                    total_sum = float(row[2]) if row[2] else 0.0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                    note = f"{new_fiscal_doc} - {item_name}"
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤ "–°–≤–æ–¥–∫–∞"
                    await save_receipt_summary(parsed_data["date"], "–í–æ–∑–≤—Ä–∞—Ç", total_sum, note)
                    await callback.message.edit_text(f"–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ {item_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –§–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {new_fiscal_doc}")
                    logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: old_fiscal_doc={fiscal_doc}, new_fiscal_doc={new_fiscal_doc}, item={item_name}, user_id={callback.from_user.id}")
                    break
            if not row_updated:
                await callback.message.edit_text(f"–¢–æ–≤–∞—Ä {item_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
                logger.info(f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: fiscal_doc={fiscal_doc}, item={item_name}, user_id={callback.from_user.id}")
        except HttpError as e:
            await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: {e.status_code} - {e.reason}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.")
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e.status_code} - {e.reason}, user_id={callback.from_user.id}")
        except Exception as e:
            await callback.message.edit_text(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.")
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}, user_id={callback.from_user.id}")
    elif callback.data == "cancel_return":
        await callback.message.edit_text(f"–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ {item_name} –æ—Ç–º–µ–Ω–µ–Ω. –§–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {new_fiscal_doc} –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω: old_fiscal_doc={fiscal_doc}, new_fiscal_doc={new_fiscal_doc}, item={item_name}, user_id={callback.from_user.id}")

    await state.clear()
    await callback.answer()



@router.callback_query(ReturnReceipt.CONFIRM_ACTION)
async def confirm_return_action(callback, state: FSMContext):
    data = await state.get_data()
    new_fiscal_doc = data["new_fiscal_doc"]
    await callback.message.answer(f"–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å –Ω–æ–≤—ã–º —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {new_fiscal_doc}.")
    logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: new_fiscal_doc={new_fiscal_doc}, user_id={callback.from_user.id}")
    await state.clear()
    await callback.answer()

@router.message(Command("balance"))
async def get_balance(message: Message):
    if not await is_user_allowed(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è /balance: user_id={message.from_user.id}")
        return

    loading_message = await message.answer("‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    try:
        balance_data = await get_monthly_balance()
        if balance_data:
            initial_balance = balance_data.get("initial_balance", 0.0)
            spent = abs(balance_data.get("spent", 0.0))
            returned = balance_data.get("returned", 0.0)
            balance = balance_data.get("balance", 0.0)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ A1 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try:
                date_result = sheets_service.spreadsheets().values().get(
                    spreadsheetId=SHEET_NAME, range="–°–≤–æ–¥–∫–∞!A1"
                ).execute()
                update_date = date_result.get("values", [[datetime.now().strftime("%d.%m.%Y")]])[0][0]
            except Exception:
                update_date = datetime.now().strftime("%d.%m.%Y")
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ A1, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞")

            await loading_message.edit_text(
                f"üí∏ –ë–∞–ª–∞–Ω—Å –Ω–∞ {update_date}:\n"
                f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {initial_balance:.2f} RUB\n"
                f"‚ûñ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:.2f} RUB\n"
                f"‚ûï –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {returned:.2f} RUB\n"
                f"üü∞ –û—Å—Ç–∞—Ç–æ–∫: {balance:.2f} RUB",
                parse_mode="Markdown"
            )
            logger.info(
                f"–ë–∞–ª–∞–Ω—Å –≤—ã–¥–∞–Ω: initial_balance={initial_balance}, spent={spent}, returned={returned}, balance={balance}, user_id={message.from_user.id}"
            )
        else:
            await loading_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: user_id={message.from_user.id}")
    except Exception as e:
        await loading_message.edit_text(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug.")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ /balance: {str(e)}, user_id={message.from_user.id}")


@router.message(AddManualAPI.FN)
async def add_manual_fn(message: Message, state: FSMContext):
    await state.update_data(fn=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–§–î* (–Ω–æ–º–µ—Ä —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞):", parse_mode="Markdown")
    await state.set_state(AddManualAPI.FD)

@router.message(AddManualAPI.FD)
async def add_manual_fd(message: Message, state: FSMContext):
    await state.update_data(fd=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–§–ü/–§–ü–î* (—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞):", parse_mode="Markdown")
    await state.set_state(AddManualAPI.FP)

@router.message(AddManualAPI.FP)
async def add_manual_fp(message: Message, state: FSMContext):
    await state.update_data(fp=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É* (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123.45):", parse_mode="Markdown")
    await state.set_state(AddManualAPI.SUM)

@router.message(AddManualAPI.SUM)
async def add_manual_sum(message: Message, state: FSMContext):
    try:
        await state.update_data(s=float(message.text.replace(",", ".")))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ *–¥–∞—Ç—É* —á–µ–∫–∞ (–ú–ú–î–î–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä 210225):", parse_mode="Markdown")
        await state.set_state(AddManualAPI.DATE)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.message(AddManualAPI.DATE)
async def add_manual_date(message: Message, state: FSMContext):
    await state.update_data(date=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è* —á–µ–∫–∞ (–ß–ß:–ú–ú):", parse_mode="Markdown")
    await state.set_state(AddManualAPI.TIME)

@router.message(AddManualAPI.TIME)
async def add_manual_time(message: Message, state: FSMContext):
    await state.update_data(time=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *—Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏* (–ø—Ä–∏—Ö–æ–¥, –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏—Ö–æ–¥–∞, —Ä–∞—Å—Ö–æ–¥, –≤–æ–∑–≤—Ä–∞—Ç —Ä–∞—Å—Ö–æ–¥–∞):", parse_mode="Markdown")
    await state.set_state(AddManualAPI.TYPE)

@router.message(AddManualAPI.TYPE)
async def add_manual_type(message: Message, state: FSMContext):
    await state.update_data(op_type=message.text.strip())
    data = await state.get_data()

    details = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞:\n"
        f"–§–ù: {data['fn']}\n"
        f"–§–î: {data['fd']}\n"
        f"–§–ü: {data['fp']}\n"
        f"–°—É–º–º–∞: {data['s']}\n"
        f"–î–∞—Ç–∞: {data['date']}\n"
        f"–í—Ä–µ–º—è: {data['time']}\n"
        f"–¢–∏–ø: {data['op_type']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ proverkacheka.com?"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_manual_api")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_manual_api")]
    ])
    await message.answer(details, reply_markup=kb)
    await state.set_state(AddManualAPI.CONFIRM)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ–∫–∞ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ (API) ===
@router.callback_query(AddManualAPI.CONFIRM, lambda c: c.data == "confirm_manual_api")
async def confirm_manual_api_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    loading = await callback.message.answer("‚åõ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ —á–µ—Ä–µ–∑ API...")

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è confirm_manual_api
        success, msg, parsed_data = await asyncio.wait_for(
            confirm_manual_api(data, callback.from_user),
            timeout=10.0
        )

        if not success or not parsed_data:
            await loading.edit_text(msg)
            await state.clear()
            await callback.answer()
            return

        await loading.edit_text("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω.")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–±—Ä–æ—Å")]],
            resize_keyboard=True
        )
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ (–∏–ª–∏ /skip):", reply_markup=keyboard)

        await state.update_data(
            username=callback.from_user.username or str(callback.from_user.id),
            parsed_data=parsed_data
        )
        await state.set_state(AddReceiptQR.CUSTOMER)

        logger.info(
            f"Manual API —á–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: fiscal_doc={parsed_data['fiscal_doc']}, "
            f"qr_string={parsed_data['qr_string']}, user_id={callback.from_user.id}"
        )
        await callback.answer()

    except asyncio.TimeoutError:
        await loading.edit_text(
            "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —á–µ–∫ –≤—Ä—É—á–Ω—É—é: /add_manual"
        )
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: user_id={callback.from_user.id}")
        await state.clear()
        await callback.answer()
    except Exception as e:
        await loading.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /debug."
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}, user_id={callback.from_user.id}")
        await state.clear()
        await callback.answer()



@router.callback_query(AddManualAPI.CONFIRM, lambda c: c.data == "cancel_manual_api")
async def cancel_manual_api_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /add_manual")
    await state.clear()
    await callback.answer()

